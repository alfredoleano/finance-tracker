{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { getCategories, createCategory, updateCategory, deleteCategoryById } from './api';\nconst useCategories = () => {\n  _s();\n  // State to manage the list of categories\n  const [categories, setCategories] = useState([]);\n\n  // State to keep track of total value\n  const [totalMaxValue, setTotalMaxValue] = useState(0);\n\n  // State to keep track of value\n  const [totalValue, setTotalValue] = useState(0);\n\n  // Get data from database and set it into categories\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const data = await getCategories();\n        setCategories(data);\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  // Calculate the new total values when categories is updated\n  useEffect(() => {\n    // Calculating new value\n    const newValues = categories.reduce((accumulator, category) => {\n      return accumulator + category.value;\n    }, 0);\n    setTotalValue(newValues);\n\n    // Calculating new total value\n    const newTotal = categories.reduce((accumulator, category) => {\n      return accumulator + category.maxValue;\n    }, 0);\n    setTotalMaxValue(newTotal);\n  }, [categories]);\n\n  // Function to add a new category\n  const addCategory = async (name, maxValue) => {\n    try {\n      // Create a new category object (id is not included bc that is generated in the backend)\n      const newCategory = {\n        name,\n        value: 0,\n        maxValue\n      };\n\n      // Send the request to create a new category in the backend\n      const data = await createCategory(newCategory);\n\n      // Update the local categories state with the new category\n      setCategories([...categories, data]);\n\n      // Close the add category modal\n      handleCloseAddCategoryModal();\n    } catch (error) {\n      // Handle any errors that occurred during the API call\n      console.error('Error adding category:', error);\n    }\n  };\n\n  // Function to edit amount in category budget\n  const editAmount = async (id, addValue) => {\n    try {\n      // Find the category to be updated\n      const category = categories.find(category => category.id === id);\n\n      // Create a new object with the updated value\n      const updatedCategory = {\n        ...category,\n        value: category.value + addValue\n      };\n\n      // Call the API function to update the category in the backend\n      const data = await updateCategory(id, updatedCategory);\n\n      // Update the categories state with the response data\n      setCategories(categories.map(category => category.id === id ? data : category));\n\n      // Close the modals\n      handleCloseAddModal();\n      handleCloseSubtractModal();\n    } catch (error) {\n      console.error('Error updating category:', error);\n    }\n  };\n\n  // Function to delete a category\n  const deleteCategory = async id => {\n    try {\n      // Call the API to delete the category in the backend\n      await deleteCategoryById(id);\n\n      // Delete the category with the matching id in the categories state\n      setCategories(categories.filter(category => category.id !== id));\n\n      // Close edit modal\n      handleCloseEditModal();\n    } catch (error) {\n      console.error('Error deleting category:', error);\n    }\n  };\n\n  // Function to change all the values of a category\n  const changeValues = async (id, limit, value) => {\n    try {\n      // Find the category by id\n      const category = categories.find(category => category.id === id);\n\n      // Create the updated category object\n      const updatedCategory = {\n        ...category,\n        value: value,\n        maxValue: limit\n      };\n\n      // Send the updated category to the backend\n      await updateCategory(id, updatedCategory);\n\n      // Update the categories state, replaces the category with the updated values if the id matches\n      setCategories(categories.map(category => category.id === id ? updatedCategory : category));\n\n      // Close the edit modal\n      handleCloseEditModal();\n    } catch (error) {\n      console.error('Error changing values:', error);\n    }\n  };\n  return {\n    categories,\n    totalMaxValue,\n    totalValue,\n    addCategory,\n    changeValues,\n    deleteCategory,\n    editAmount\n  };\n};\n_s(useCategories, \"jLJV1r1EvNgLFKFmRJo+PlUWKpw=\");\nexport default useCategories;","map":{"version":3,"names":["useState","useEffect","getCategories","createCategory","updateCategory","deleteCategoryById","useCategories","_s","categories","setCategories","totalMaxValue","setTotalMaxValue","totalValue","setTotalValue","fetchCategories","data","error","console","newValues","reduce","accumulator","category","value","newTotal","maxValue","addCategory","name","newCategory","handleCloseAddCategoryModal","editAmount","id","addValue","find","updatedCategory","map","handleCloseAddModal","handleCloseSubtractModal","deleteCategory","filter","handleCloseEditModal","changeValues","limit"],"sources":["/Users/alfredoleano/Desktop/Projects/finance-tracker/src/useCategories.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { getCategories, createCategory, updateCategory, deleteCategoryById } from './api';\n\n\nconst useCategories = () => {\n    // State to manage the list of categories\n    const [categories, setCategories] = useState([]);\n  \n    // State to keep track of total value\n    const [totalMaxValue, setTotalMaxValue] = useState(0);\n\n    // State to keep track of value\n    const [totalValue, setTotalValue] = useState(0);\n\n    // Get data from database and set it into categories\n    useEffect(() => {\n        const fetchCategories = async () => {\n        try {\n            const data = await getCategories();\n            setCategories(data);\n        } catch (error) {\n            console.error('Error fetching categories:', error);\n        }\n        };\n\n        fetchCategories();\n    }, []);\n\n    // Calculate the new total values when categories is updated\n    useEffect(() => {\n        // Calculating new value\n        const newValues = categories.reduce((accumulator, category) => {\n        return accumulator + category.value;\n        },0);\n\n        setTotalValue(newValues);\n\n        // Calculating new total value\n        const newTotal = categories.reduce((accumulator, category) => {\n        return accumulator + category.maxValue;\n        }, 0);\n        \n        setTotalMaxValue(newTotal);\n    }, [categories]);\n\n    // Function to add a new category\n    const addCategory = async (name, maxValue) => {\n        try{\n        // Create a new category object (id is not included bc that is generated in the backend)\n        const newCategory = { name, value: 0, maxValue};\n\n        // Send the request to create a new category in the backend\n        const data = await createCategory(newCategory);\n\n        // Update the local categories state with the new category\n        setCategories([...categories, data]);\n\n        // Close the add category modal\n        handleCloseAddCategoryModal();\n        } catch (error) {\n        // Handle any errors that occurred during the API call\n        console.error('Error adding category:', error);\n        }\n    };\n\n    // Function to edit amount in category budget\n    const editAmount = async (id, addValue) => {\n        try {\n        // Find the category to be updated\n        const category = categories.find(category => category.id === id);\n\n        // Create a new object with the updated value\n        const updatedCategory = {\n            ...category,\n            value: category.value + addValue\n        };\n\n        // Call the API function to update the category in the backend\n        const data = await updateCategory(id, updatedCategory);\n\n        // Update the categories state with the response data\n        setCategories(categories.map(category => \n            category.id === id ? data : category\n        ));\n\n        // Close the modals\n        handleCloseAddModal();\n        handleCloseSubtractModal();\n        } catch (error) {\n        console.error('Error updating category:', error);\n        }\n    };\n\n    // Function to delete a category\n    const deleteCategory = async (id) => {\n        try {\n        // Call the API to delete the category in the backend\n        await deleteCategoryById(id);\n\n        // Delete the category with the matching id in the categories state\n        setCategories(categories.filter(category => category.id !== id));\n\n        // Close edit modal\n        handleCloseEditModal();\n        } catch (error) {\n        console.error('Error deleting category:', error);\n        }\n    }\n\n    // Function to change all the values of a category\n    const changeValues = async (id, limit, value) => {\n        try {\n        // Find the category by id\n        const category = categories.find(category => category.id === id);\n\n        // Create the updated category object\n        const updatedCategory = { \n            ...category,\n            value: value,\n            maxValue: limit\n        }\n\n        // Send the updated category to the backend\n        await updateCategory(id, updatedCategory);\n\n        // Update the categories state, replaces the category with the updated values if the id matches\n        setCategories(categories.map(category => \n            category.id === id ? updatedCategory : category\n        ));\n\n        // Close the edit modal\n        handleCloseEditModal();\n        } catch (error) {\n        console.error('Error changing values:', error);\n        }\n    }\n\n    return {\n        categories,\n        totalMaxValue,\n        totalValue,\n        addCategory,\n        changeValues,\n        deleteCategory,\n        editAmount\n    };\n};\n\nexport default useCategories;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}